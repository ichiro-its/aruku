// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: aruku.proto

#include "aruku.pb.h"
#include "aruku.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace helloworld {

static const char* GetConfig_method_names[] = {
  "/helloworld.GetConfig/GetConfig",
};

std::unique_ptr< GetConfig::Stub> GetConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GetConfig::Stub> stub(new GetConfig::Stub(channel, options));
  return stub;
}

GetConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetConfig_(GetConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GetConfig::Stub::GetConfig(::grpc::ClientContext* context, const ::helloworld::Empty& request, ::helloworld::ConfigWalking* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::Empty, ::helloworld::ConfigWalking, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

void GetConfig::Stub::async::GetConfig(::grpc::ClientContext* context, const ::helloworld::Empty* request, ::helloworld::ConfigWalking* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::Empty, ::helloworld::ConfigWalking, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, std::move(f));
}

void GetConfig::Stub::async::GetConfig(::grpc::ClientContext* context, const ::helloworld::Empty* request, ::helloworld::ConfigWalking* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConfigWalking>* GetConfig::Stub::PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::helloworld::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::ConfigWalking, ::helloworld::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::ConfigWalking>* GetConfig::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::helloworld::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

GetConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GetConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GetConfig::Service, ::helloworld::Empty, ::helloworld::ConfigWalking, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GetConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::Empty* req,
             ::helloworld::ConfigWalking* resp) {
               return service->GetConfig(ctx, req, resp);
             }, this)));
}

GetConfig::Service::~Service() {
}

::grpc::Status GetConfig::Service::GetConfig(::grpc::ServerContext* context, const ::helloworld::Empty* request, ::helloworld::ConfigWalking* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SaveConfig_method_names[] = {
  "/helloworld.SaveConfig/SaveConfig",
};

std::unique_ptr< SaveConfig::Stub> SaveConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SaveConfig::Stub> stub(new SaveConfig::Stub(channel, options));
  return stub;
}

SaveConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SaveConfig_(SaveConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SaveConfig::Stub::SaveConfig(::grpc::ClientContext* context, const ::helloworld::ConfigWalking& request, ::helloworld::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::helloworld::ConfigWalking, ::helloworld::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveConfig_, context, request, response);
}

void SaveConfig::Stub::async::SaveConfig(::grpc::ClientContext* context, const ::helloworld::ConfigWalking* request, ::helloworld::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::helloworld::ConfigWalking, ::helloworld::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveConfig_, context, request, response, std::move(f));
}

void SaveConfig::Stub::async::SaveConfig(::grpc::ClientContext* context, const ::helloworld::ConfigWalking* request, ::helloworld::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Empty>* SaveConfig::Stub::PrepareAsyncSaveConfigRaw(::grpc::ClientContext* context, const ::helloworld::ConfigWalking& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::helloworld::Empty, ::helloworld::ConfigWalking, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Empty>* SaveConfig::Stub::AsyncSaveConfigRaw(::grpc::ClientContext* context, const ::helloworld::ConfigWalking& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

SaveConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SaveConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SaveConfig::Service, ::helloworld::ConfigWalking, ::helloworld::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SaveConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::ConfigWalking* req,
             ::helloworld::Empty* resp) {
               return service->SaveConfig(ctx, req, resp);
             }, this)));
}

SaveConfig::Service::~Service() {
}

::grpc::Status SaveConfig::Service::SaveConfig(::grpc::ServerContext* context, const ::helloworld::ConfigWalking* request, ::helloworld::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace helloworld

