// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aruku.proto

#include "aruku.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ros2_ws {
namespace aruku {
namespace proto {
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR Point2::Point2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Point2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point2DefaultTypeInternal() {}
  union {
    Point2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point2DefaultTypeInternal _Point2_default_instance_;
PROTOBUF_CONSTEXPR ConfigWalking::ConfigWalking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.json_kinematic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.json_walking_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigWalkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigWalkingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigWalkingDefaultTypeInternal() {}
  union {
    ConfigWalking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigWalkingDefaultTypeInternal _ConfigWalking_default_instance_;
PROTOBUF_CONSTEXPR SetWalking::SetWalking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_move_)*/0
  , /*decltype(_impl_.y_move_)*/0
  , /*decltype(_impl_.a_move_)*/0
  , /*decltype(_impl_.run_)*/false
  , /*decltype(_impl_.aim_on_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetWalkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetWalkingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetWalkingDefaultTypeInternal() {}
  union {
    SetWalking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetWalkingDefaultTypeInternal _SetWalking_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.odometry_)*/nullptr
  , /*decltype(_impl_.x_amplitude_)*/0
  , /*decltype(_impl_.y_amplitude_)*/0
  , /*decltype(_impl_.a_amplitude_)*/0
  , /*decltype(_impl_.is_running_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace proto
}  // namespace aruku
}  // namespace ros2_ws
static ::_pb::Metadata file_level_metadata_aruku_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_aruku_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_aruku_2eproto = nullptr;

const uint32_t TableStruct_aruku_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Point2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Point2, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Point2, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::ConfigWalking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::ConfigWalking, _impl_.json_kinematic_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::ConfigWalking, _impl_.json_walking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _impl_.run_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _impl_.x_move_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _impl_.y_move_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _impl_.a_move_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::SetWalking, _impl_.aim_on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _impl_.is_running_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _impl_.x_amplitude_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _impl_.y_amplitude_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _impl_.a_amplitude_),
  PROTOBUF_FIELD_OFFSET(::ros2_ws::aruku::proto::Status, _impl_.odometry_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros2_ws::aruku::proto::Empty)},
  { 6, -1, -1, sizeof(::ros2_ws::aruku::proto::Point2)},
  { 14, -1, -1, sizeof(::ros2_ws::aruku::proto::ConfigWalking)},
  { 22, -1, -1, sizeof(::ros2_ws::aruku::proto::SetWalking)},
  { 33, -1, -1, sizeof(::ros2_ws::aruku::proto::Status)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ros2_ws::aruku::proto::_Empty_default_instance_._instance,
  &::ros2_ws::aruku::proto::_Point2_default_instance_._instance,
  &::ros2_ws::aruku::proto::_ConfigWalking_default_instance_._instance,
  &::ros2_ws::aruku::proto::_SetWalking_default_instance_._instance,
  &::ros2_ws::aruku::proto::_Status_default_instance_._instance,
};

const char descriptor_table_protodef_aruku_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013aruku.proto\022\023ros2_ws.aruku.proto\"\007\n\005Em"
  "pty\"\036\n\006Point2\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"=\n\rC"
  "onfigWalking\022\026\n\016json_kinematic\030\001 \001(\t\022\024\n\014"
  "json_walking\030\002 \001(\t\"Y\n\nSetWalking\022\013\n\003run\030"
  "\001 \001(\010\022\016\n\006x_move\030\002 \001(\001\022\016\n\006y_move\030\003 \001(\001\022\016\n"
  "\006a_move\030\004 \001(\001\022\016\n\006aim_on\030\005 \001(\010\"\212\001\n\006Status"
  "\022\022\n\nis_running\030\001 \001(\010\022\023\n\013x_amplitude\030\002 \001("
  "\001\022\023\n\013y_amplitude\030\003 \001(\001\022\023\n\013a_amplitude\030\004 "
  "\001(\001\022-\n\010odometry\030\005 \001(\0132\033.ros2_ws.aruku.pr"
  "oto.Point22Z\n\tGetConfig\022M\n\tGetConfig\022\032.r"
  "os2_ws.aruku.proto.Empty\032\".ros2_ws.aruku"
  ".proto.ConfigWalking\"\0002\\\n\nSaveConfig\022N\n\n"
  "SaveConfig\022\".ros2_ws.aruku.proto.ConfigW"
  "alking\032\032.ros2_ws.aruku.proto.Empty\"\000b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_aruku_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_aruku_2eproto = {
    false, false, 564, descriptor_table_protodef_aruku_2eproto,
    "aruku.proto",
    &descriptor_table_aruku_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_aruku_2eproto::offsets,
    file_level_metadata_aruku_2eproto, file_level_enum_descriptors_aruku_2eproto,
    file_level_service_descriptors_aruku_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_aruku_2eproto_getter() {
  return &descriptor_table_aruku_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_aruku_2eproto(&descriptor_table_aruku_2eproto);
namespace ros2_ws {
namespace aruku {
namespace proto {

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ros2_ws.aruku.proto.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ros2_ws.aruku.proto.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aruku_2eproto_getter, &descriptor_table_aruku_2eproto_once,
      file_level_metadata_aruku_2eproto[0]);
}

// ===================================================================

class Point2::_Internal {
 public:
};

Point2::Point2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ros2_ws.aruku.proto.Point2)
}
Point2::Point2(const Point2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:ros2_ws.aruku.proto.Point2)
}

inline void Point2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point2::~Point2() {
  // @@protoc_insertion_point(destructor:ros2_ws.aruku.proto.Point2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point2::Clear() {
// @@protoc_insertion_point(message_clear_start:ros2_ws.aruku.proto.Point2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros2_ws.aruku.proto.Point2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros2_ws.aruku.proto.Point2)
  return target;
}

size_t Point2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros2_ws.aruku.proto.Point2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2::GetClassData() const { return &_class_data_; }


void Point2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point2*>(&to_msg);
  auto& from = static_cast<const Point2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ros2_ws.aruku.proto.Point2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2::CopyFrom(const Point2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros2_ws.aruku.proto.Point2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2::IsInitialized() const {
  return true;
}

void Point2::InternalSwap(Point2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2, _impl_.y_)
      + sizeof(Point2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aruku_2eproto_getter, &descriptor_table_aruku_2eproto_once,
      file_level_metadata_aruku_2eproto[1]);
}

// ===================================================================

class ConfigWalking::_Internal {
 public:
};

ConfigWalking::ConfigWalking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ros2_ws.aruku.proto.ConfigWalking)
}
ConfigWalking::ConfigWalking(const ConfigWalking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigWalking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.json_kinematic_){}
    , decltype(_impl_.json_walking_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.json_kinematic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_kinematic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_json_kinematic().empty()) {
    _this->_impl_.json_kinematic_.Set(from._internal_json_kinematic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.json_walking_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_walking_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_json_walking().empty()) {
    _this->_impl_.json_walking_.Set(from._internal_json_walking(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ros2_ws.aruku.proto.ConfigWalking)
}

inline void ConfigWalking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.json_kinematic_){}
    , decltype(_impl_.json_walking_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.json_kinematic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_kinematic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.json_walking_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_walking_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigWalking::~ConfigWalking() {
  // @@protoc_insertion_point(destructor:ros2_ws.aruku.proto.ConfigWalking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigWalking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.json_kinematic_.Destroy();
  _impl_.json_walking_.Destroy();
}

void ConfigWalking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigWalking::Clear() {
// @@protoc_insertion_point(message_clear_start:ros2_ws.aruku.proto.ConfigWalking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.json_kinematic_.ClearToEmpty();
  _impl_.json_walking_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigWalking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string json_kinematic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_json_kinematic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ros2_ws.aruku.proto.ConfigWalking.json_kinematic"));
        } else
          goto handle_unusual;
        continue;
      // string json_walking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_walking();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ros2_ws.aruku.proto.ConfigWalking.json_walking"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigWalking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros2_ws.aruku.proto.ConfigWalking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string json_kinematic = 1;
  if (!this->_internal_json_kinematic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_kinematic().data(), static_cast<int>(this->_internal_json_kinematic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros2_ws.aruku.proto.ConfigWalking.json_kinematic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json_kinematic(), target);
  }

  // string json_walking = 2;
  if (!this->_internal_json_walking().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_walking().data(), static_cast<int>(this->_internal_json_walking().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros2_ws.aruku.proto.ConfigWalking.json_walking");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_walking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros2_ws.aruku.proto.ConfigWalking)
  return target;
}

size_t ConfigWalking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros2_ws.aruku.proto.ConfigWalking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json_kinematic = 1;
  if (!this->_internal_json_kinematic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_kinematic());
  }

  // string json_walking = 2;
  if (!this->_internal_json_walking().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_walking());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigWalking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigWalking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigWalking::GetClassData() const { return &_class_data_; }


void ConfigWalking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigWalking*>(&to_msg);
  auto& from = static_cast<const ConfigWalking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ros2_ws.aruku.proto.ConfigWalking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_json_kinematic().empty()) {
    _this->_internal_set_json_kinematic(from._internal_json_kinematic());
  }
  if (!from._internal_json_walking().empty()) {
    _this->_internal_set_json_walking(from._internal_json_walking());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigWalking::CopyFrom(const ConfigWalking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros2_ws.aruku.proto.ConfigWalking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigWalking::IsInitialized() const {
  return true;
}

void ConfigWalking::InternalSwap(ConfigWalking* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_kinematic_, lhs_arena,
      &other->_impl_.json_kinematic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_walking_, lhs_arena,
      &other->_impl_.json_walking_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigWalking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aruku_2eproto_getter, &descriptor_table_aruku_2eproto_once,
      file_level_metadata_aruku_2eproto[2]);
}

// ===================================================================

class SetWalking::_Internal {
 public:
};

SetWalking::SetWalking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ros2_ws.aruku.proto.SetWalking)
}
SetWalking::SetWalking(const SetWalking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetWalking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_move_){}
    , decltype(_impl_.y_move_){}
    , decltype(_impl_.a_move_){}
    , decltype(_impl_.run_){}
    , decltype(_impl_.aim_on_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_move_, &from._impl_.x_move_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aim_on_) -
    reinterpret_cast<char*>(&_impl_.x_move_)) + sizeof(_impl_.aim_on_));
  // @@protoc_insertion_point(copy_constructor:ros2_ws.aruku.proto.SetWalking)
}

inline void SetWalking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_move_){0}
    , decltype(_impl_.y_move_){0}
    , decltype(_impl_.a_move_){0}
    , decltype(_impl_.run_){false}
    , decltype(_impl_.aim_on_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetWalking::~SetWalking() {
  // @@protoc_insertion_point(destructor:ros2_ws.aruku.proto.SetWalking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetWalking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetWalking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetWalking::Clear() {
// @@protoc_insertion_point(message_clear_start:ros2_ws.aruku.proto.SetWalking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_move_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.aim_on_) -
      reinterpret_cast<char*>(&_impl_.x_move_)) + sizeof(_impl_.aim_on_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWalking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool run = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x_move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.x_move_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y_move = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.y_move_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a_move = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a_move_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool aim_on = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.aim_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetWalking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros2_ws.aruku.proto.SetWalking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool run = 1;
  if (this->_internal_run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_run(), target);
  }

  // double x_move = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_move = this->_internal_x_move();
  uint64_t raw_x_move;
  memcpy(&raw_x_move, &tmp_x_move, sizeof(tmp_x_move));
  if (raw_x_move != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x_move(), target);
  }

  // double y_move = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_move = this->_internal_y_move();
  uint64_t raw_y_move;
  memcpy(&raw_y_move, &tmp_y_move, sizeof(tmp_y_move));
  if (raw_y_move != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y_move(), target);
  }

  // double a_move = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_move = this->_internal_a_move();
  uint64_t raw_a_move;
  memcpy(&raw_a_move, &tmp_a_move, sizeof(tmp_a_move));
  if (raw_a_move != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a_move(), target);
  }

  // bool aim_on = 5;
  if (this->_internal_aim_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_aim_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros2_ws.aruku.proto.SetWalking)
  return target;
}

size_t SetWalking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros2_ws.aruku.proto.SetWalking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_move = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_move = this->_internal_x_move();
  uint64_t raw_x_move;
  memcpy(&raw_x_move, &tmp_x_move, sizeof(tmp_x_move));
  if (raw_x_move != 0) {
    total_size += 1 + 8;
  }

  // double y_move = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_move = this->_internal_y_move();
  uint64_t raw_y_move;
  memcpy(&raw_y_move, &tmp_y_move, sizeof(tmp_y_move));
  if (raw_y_move != 0) {
    total_size += 1 + 8;
  }

  // double a_move = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_move = this->_internal_a_move();
  uint64_t raw_a_move;
  memcpy(&raw_a_move, &tmp_a_move, sizeof(tmp_a_move));
  if (raw_a_move != 0) {
    total_size += 1 + 8;
  }

  // bool run = 1;
  if (this->_internal_run() != 0) {
    total_size += 1 + 1;
  }

  // bool aim_on = 5;
  if (this->_internal_aim_on() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWalking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetWalking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWalking::GetClassData() const { return &_class_data_; }


void SetWalking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetWalking*>(&to_msg);
  auto& from = static_cast<const SetWalking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ros2_ws.aruku.proto.SetWalking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_move = from._internal_x_move();
  uint64_t raw_x_move;
  memcpy(&raw_x_move, &tmp_x_move, sizeof(tmp_x_move));
  if (raw_x_move != 0) {
    _this->_internal_set_x_move(from._internal_x_move());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_move = from._internal_y_move();
  uint64_t raw_y_move;
  memcpy(&raw_y_move, &tmp_y_move, sizeof(tmp_y_move));
  if (raw_y_move != 0) {
    _this->_internal_set_y_move(from._internal_y_move());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_move = from._internal_a_move();
  uint64_t raw_a_move;
  memcpy(&raw_a_move, &tmp_a_move, sizeof(tmp_a_move));
  if (raw_a_move != 0) {
    _this->_internal_set_a_move(from._internal_a_move());
  }
  if (from._internal_run() != 0) {
    _this->_internal_set_run(from._internal_run());
  }
  if (from._internal_aim_on() != 0) {
    _this->_internal_set_aim_on(from._internal_aim_on());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWalking::CopyFrom(const SetWalking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros2_ws.aruku.proto.SetWalking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWalking::IsInitialized() const {
  return true;
}

void SetWalking::InternalSwap(SetWalking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetWalking, _impl_.aim_on_)
      + sizeof(SetWalking::_impl_.aim_on_)
      - PROTOBUF_FIELD_OFFSET(SetWalking, _impl_.x_move_)>(
          reinterpret_cast<char*>(&_impl_.x_move_),
          reinterpret_cast<char*>(&other->_impl_.x_move_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWalking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aruku_2eproto_getter, &descriptor_table_aruku_2eproto_once,
      file_level_metadata_aruku_2eproto[3]);
}

// ===================================================================

class Status::_Internal {
 public:
  static const ::ros2_ws::aruku::proto::Point2& odometry(const Status* msg);
};

const ::ros2_ws::aruku::proto::Point2&
Status::_Internal::odometry(const Status* msg) {
  return *msg->_impl_.odometry_;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ros2_ws.aruku.proto.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.odometry_){nullptr}
    , decltype(_impl_.x_amplitude_){}
    , decltype(_impl_.y_amplitude_){}
    , decltype(_impl_.a_amplitude_){}
    , decltype(_impl_.is_running_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    _this->_impl_.odometry_ = new ::ros2_ws::aruku::proto::Point2(*from._impl_.odometry_);
  }
  ::memcpy(&_impl_.x_amplitude_, &from._impl_.x_amplitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_running_) -
    reinterpret_cast<char*>(&_impl_.x_amplitude_)) + sizeof(_impl_.is_running_));
  // @@protoc_insertion_point(copy_constructor:ros2_ws.aruku.proto.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.odometry_){nullptr}
    , decltype(_impl_.x_amplitude_){0}
    , decltype(_impl_.y_amplitude_){0}
    , decltype(_impl_.a_amplitude_){0}
    , decltype(_impl_.is_running_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:ros2_ws.aruku.proto.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.odometry_;
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ros2_ws.aruku.proto.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.odometry_ != nullptr) {
    delete _impl_.odometry_;
  }
  _impl_.odometry_ = nullptr;
  ::memset(&_impl_.x_amplitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_running_) -
      reinterpret_cast<char*>(&_impl_.x_amplitude_)) + sizeof(_impl_.is_running_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_running = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x_amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.x_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y_amplitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.y_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a_amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ros2_ws.aruku.proto.Point2 odometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros2_ws.aruku.proto.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_running = 1;
  if (this->_internal_is_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_running(), target);
  }

  // double x_amplitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_amplitude = this->_internal_x_amplitude();
  uint64_t raw_x_amplitude;
  memcpy(&raw_x_amplitude, &tmp_x_amplitude, sizeof(tmp_x_amplitude));
  if (raw_x_amplitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x_amplitude(), target);
  }

  // double y_amplitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_amplitude = this->_internal_y_amplitude();
  uint64_t raw_y_amplitude;
  memcpy(&raw_y_amplitude, &tmp_y_amplitude, sizeof(tmp_y_amplitude));
  if (raw_y_amplitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y_amplitude(), target);
  }

  // double a_amplitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_amplitude = this->_internal_a_amplitude();
  uint64_t raw_a_amplitude;
  memcpy(&raw_a_amplitude, &tmp_a_amplitude, sizeof(tmp_a_amplitude));
  if (raw_a_amplitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a_amplitude(), target);
  }

  // .ros2_ws.aruku.proto.Point2 odometry = 5;
  if (this->_internal_has_odometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::odometry(this),
        _Internal::odometry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros2_ws.aruku.proto.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros2_ws.aruku.proto.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ros2_ws.aruku.proto.Point2 odometry = 5;
  if (this->_internal_has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.odometry_);
  }

  // double x_amplitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_amplitude = this->_internal_x_amplitude();
  uint64_t raw_x_amplitude;
  memcpy(&raw_x_amplitude, &tmp_x_amplitude, sizeof(tmp_x_amplitude));
  if (raw_x_amplitude != 0) {
    total_size += 1 + 8;
  }

  // double y_amplitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_amplitude = this->_internal_y_amplitude();
  uint64_t raw_y_amplitude;
  memcpy(&raw_y_amplitude, &tmp_y_amplitude, sizeof(tmp_y_amplitude));
  if (raw_y_amplitude != 0) {
    total_size += 1 + 8;
  }

  // double a_amplitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_amplitude = this->_internal_a_amplitude();
  uint64_t raw_a_amplitude;
  memcpy(&raw_a_amplitude, &tmp_a_amplitude, sizeof(tmp_a_amplitude));
  if (raw_a_amplitude != 0) {
    total_size += 1 + 8;
  }

  // bool is_running = 1;
  if (this->_internal_is_running() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ros2_ws.aruku.proto.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_odometry()) {
    _this->_internal_mutable_odometry()->::ros2_ws::aruku::proto::Point2::MergeFrom(
        from._internal_odometry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_amplitude = from._internal_x_amplitude();
  uint64_t raw_x_amplitude;
  memcpy(&raw_x_amplitude, &tmp_x_amplitude, sizeof(tmp_x_amplitude));
  if (raw_x_amplitude != 0) {
    _this->_internal_set_x_amplitude(from._internal_x_amplitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_amplitude = from._internal_y_amplitude();
  uint64_t raw_y_amplitude;
  memcpy(&raw_y_amplitude, &tmp_y_amplitude, sizeof(tmp_y_amplitude));
  if (raw_y_amplitude != 0) {
    _this->_internal_set_y_amplitude(from._internal_y_amplitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a_amplitude = from._internal_a_amplitude();
  uint64_t raw_a_amplitude;
  memcpy(&raw_a_amplitude, &tmp_a_amplitude, sizeof(tmp_a_amplitude));
  if (raw_a_amplitude != 0) {
    _this->_internal_set_a_amplitude(from._internal_a_amplitude());
  }
  if (from._internal_is_running() != 0) {
    _this->_internal_set_is_running(from._internal_is_running());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros2_ws.aruku.proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.is_running_)
      + sizeof(Status::_impl_.is_running_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.odometry_)>(
          reinterpret_cast<char*>(&_impl_.odometry_),
          reinterpret_cast<char*>(&other->_impl_.odometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aruku_2eproto_getter, &descriptor_table_aruku_2eproto_once,
      file_level_metadata_aruku_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aruku
}  // namespace ros2_ws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros2_ws::aruku::proto::Empty*
Arena::CreateMaybeMessage< ::ros2_ws::aruku::proto::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros2_ws::aruku::proto::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::ros2_ws::aruku::proto::Point2*
Arena::CreateMaybeMessage< ::ros2_ws::aruku::proto::Point2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros2_ws::aruku::proto::Point2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ros2_ws::aruku::proto::ConfigWalking*
Arena::CreateMaybeMessage< ::ros2_ws::aruku::proto::ConfigWalking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros2_ws::aruku::proto::ConfigWalking >(arena);
}
template<> PROTOBUF_NOINLINE ::ros2_ws::aruku::proto::SetWalking*
Arena::CreateMaybeMessage< ::ros2_ws::aruku::proto::SetWalking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros2_ws::aruku::proto::SetWalking >(arena);
}
template<> PROTOBUF_NOINLINE ::ros2_ws::aruku::proto::Status*
Arena::CreateMaybeMessage< ::ros2_ws::aruku::proto::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros2_ws::aruku::proto::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
