// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aruku.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aruku_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aruku_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aruku_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aruku_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aruku_2eproto;
namespace ros2_ws {
namespace aruku {
namespace proto {
class ConfigWalking;
struct ConfigWalkingDefaultTypeInternal;
extern ConfigWalkingDefaultTypeInternal _ConfigWalking_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Point2;
struct Point2DefaultTypeInternal;
extern Point2DefaultTypeInternal _Point2_default_instance_;
class SetWalking;
struct SetWalkingDefaultTypeInternal;
extern SetWalkingDefaultTypeInternal _SetWalking_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace proto
}  // namespace aruku
}  // namespace ros2_ws
PROTOBUF_NAMESPACE_OPEN
template<> ::ros2_ws::aruku::proto::ConfigWalking* Arena::CreateMaybeMessage<::ros2_ws::aruku::proto::ConfigWalking>(Arena*);
template<> ::ros2_ws::aruku::proto::Empty* Arena::CreateMaybeMessage<::ros2_ws::aruku::proto::Empty>(Arena*);
template<> ::ros2_ws::aruku::proto::Point2* Arena::CreateMaybeMessage<::ros2_ws::aruku::proto::Point2>(Arena*);
template<> ::ros2_ws::aruku::proto::SetWalking* Arena::CreateMaybeMessage<::ros2_ws::aruku::proto::SetWalking>(Arena*);
template<> ::ros2_ws::aruku::proto::Status* Arena::CreateMaybeMessage<::ros2_ws::aruku::proto::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros2_ws {
namespace aruku {
namespace proto {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ros2_ws.aruku.proto.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros2_ws.aruku.proto.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ros2_ws.aruku.proto.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_aruku_2eproto;
};
// -------------------------------------------------------------------

class Point2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros2_ws.aruku.proto.Point2) */ {
 public:
  inline Point2() : Point2(nullptr) {}
  ~Point2() override;
  explicit PROTOBUF_CONSTEXPR Point2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2(const Point2& from);
  Point2(Point2&& from) noexcept
    : Point2() {
    *this = ::std::move(from);
  }

  inline Point2& operator=(const Point2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2& operator=(Point2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2* internal_default_instance() {
    return reinterpret_cast<const Point2*>(
               &_Point2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point2& a, Point2& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point2& from) {
    Point2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros2_ws.aruku.proto.Point2";
  }
  protected:
  explicit Point2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:ros2_ws.aruku.proto.Point2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aruku_2eproto;
};
// -------------------------------------------------------------------

class ConfigWalking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros2_ws.aruku.proto.ConfigWalking) */ {
 public:
  inline ConfigWalking() : ConfigWalking(nullptr) {}
  ~ConfigWalking() override;
  explicit PROTOBUF_CONSTEXPR ConfigWalking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigWalking(const ConfigWalking& from);
  ConfigWalking(ConfigWalking&& from) noexcept
    : ConfigWalking() {
    *this = ::std::move(from);
  }

  inline ConfigWalking& operator=(const ConfigWalking& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigWalking& operator=(ConfigWalking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigWalking& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigWalking* internal_default_instance() {
    return reinterpret_cast<const ConfigWalking*>(
               &_ConfigWalking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigWalking& a, ConfigWalking& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigWalking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigWalking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigWalking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigWalking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigWalking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigWalking& from) {
    ConfigWalking::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWalking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros2_ws.aruku.proto.ConfigWalking";
  }
  protected:
  explicit ConfigWalking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonKinematicFieldNumber = 1,
    kJsonWalkingFieldNumber = 2,
  };
  // string json_kinematic = 1;
  void clear_json_kinematic();
  const std::string& json_kinematic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_kinematic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_kinematic();
  PROTOBUF_NODISCARD std::string* release_json_kinematic();
  void set_allocated_json_kinematic(std::string* json_kinematic);
  private:
  const std::string& _internal_json_kinematic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_kinematic(const std::string& value);
  std::string* _internal_mutable_json_kinematic();
  public:

  // string json_walking = 2;
  void clear_json_walking();
  const std::string& json_walking() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_walking(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_walking();
  PROTOBUF_NODISCARD std::string* release_json_walking();
  void set_allocated_json_walking(std::string* json_walking);
  private:
  const std::string& _internal_json_walking() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_walking(const std::string& value);
  std::string* _internal_mutable_json_walking();
  public:

  // @@protoc_insertion_point(class_scope:ros2_ws.aruku.proto.ConfigWalking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_kinematic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_walking_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aruku_2eproto;
};
// -------------------------------------------------------------------

class SetWalking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros2_ws.aruku.proto.SetWalking) */ {
 public:
  inline SetWalking() : SetWalking(nullptr) {}
  ~SetWalking() override;
  explicit PROTOBUF_CONSTEXPR SetWalking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWalking(const SetWalking& from);
  SetWalking(SetWalking&& from) noexcept
    : SetWalking() {
    *this = ::std::move(from);
  }

  inline SetWalking& operator=(const SetWalking& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWalking& operator=(SetWalking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWalking& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWalking* internal_default_instance() {
    return reinterpret_cast<const SetWalking*>(
               &_SetWalking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetWalking& a, SetWalking& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWalking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWalking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWalking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWalking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWalking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWalking& from) {
    SetWalking::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWalking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros2_ws.aruku.proto.SetWalking";
  }
  protected:
  explicit SetWalking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMoveFieldNumber = 2,
    kYMoveFieldNumber = 3,
    kAMoveFieldNumber = 4,
    kRunFieldNumber = 1,
    kAimOnFieldNumber = 5,
  };
  // double x_move = 2;
  void clear_x_move();
  double x_move() const;
  void set_x_move(double value);
  private:
  double _internal_x_move() const;
  void _internal_set_x_move(double value);
  public:

  // double y_move = 3;
  void clear_y_move();
  double y_move() const;
  void set_y_move(double value);
  private:
  double _internal_y_move() const;
  void _internal_set_y_move(double value);
  public:

  // double a_move = 4;
  void clear_a_move();
  double a_move() const;
  void set_a_move(double value);
  private:
  double _internal_a_move() const;
  void _internal_set_a_move(double value);
  public:

  // bool run = 1;
  void clear_run();
  bool run() const;
  void set_run(bool value);
  private:
  bool _internal_run() const;
  void _internal_set_run(bool value);
  public:

  // bool aim_on = 5;
  void clear_aim_on();
  bool aim_on() const;
  void set_aim_on(bool value);
  private:
  bool _internal_aim_on() const;
  void _internal_set_aim_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ros2_ws.aruku.proto.SetWalking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_move_;
    double y_move_;
    double a_move_;
    bool run_;
    bool aim_on_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aruku_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros2_ws.aruku.proto.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros2_ws.aruku.proto.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 5,
    kXAmplitudeFieldNumber = 2,
    kYAmplitudeFieldNumber = 3,
    kAAmplitudeFieldNumber = 4,
    kIsRunningFieldNumber = 1,
  };
  // .ros2_ws.aruku.proto.Point2 odometry = 5;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::ros2_ws::aruku::proto::Point2& odometry() const;
  PROTOBUF_NODISCARD ::ros2_ws::aruku::proto::Point2* release_odometry();
  ::ros2_ws::aruku::proto::Point2* mutable_odometry();
  void set_allocated_odometry(::ros2_ws::aruku::proto::Point2* odometry);
  private:
  const ::ros2_ws::aruku::proto::Point2& _internal_odometry() const;
  ::ros2_ws::aruku::proto::Point2* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::ros2_ws::aruku::proto::Point2* odometry);
  ::ros2_ws::aruku::proto::Point2* unsafe_arena_release_odometry();

  // double x_amplitude = 2;
  void clear_x_amplitude();
  double x_amplitude() const;
  void set_x_amplitude(double value);
  private:
  double _internal_x_amplitude() const;
  void _internal_set_x_amplitude(double value);
  public:

  // double y_amplitude = 3;
  void clear_y_amplitude();
  double y_amplitude() const;
  void set_y_amplitude(double value);
  private:
  double _internal_y_amplitude() const;
  void _internal_set_y_amplitude(double value);
  public:

  // double a_amplitude = 4;
  void clear_a_amplitude();
  double a_amplitude() const;
  void set_a_amplitude(double value);
  private:
  double _internal_a_amplitude() const;
  void _internal_set_a_amplitude(double value);
  public:

  // bool is_running = 1;
  void clear_is_running();
  bool is_running() const;
  void set_is_running(bool value);
  private:
  bool _internal_is_running() const;
  void _internal_set_is_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ros2_ws.aruku.proto.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ros2_ws::aruku::proto::Point2* odometry_;
    double x_amplitude_;
    double y_amplitude_;
    double a_amplitude_;
    bool is_running_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aruku_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Point2

// double x = 1;
inline void Point2::clear_x() {
  _impl_.x_ = 0;
}
inline double Point2::_internal_x() const {
  return _impl_.x_;
}
inline double Point2::x() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Point2.x)
  return _internal_x();
}
inline void Point2::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point2::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Point2.x)
}

// double y = 2;
inline void Point2::clear_y() {
  _impl_.y_ = 0;
}
inline double Point2::_internal_y() const {
  return _impl_.y_;
}
inline double Point2::y() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Point2.y)
  return _internal_y();
}
inline void Point2::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point2::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Point2.y)
}

// -------------------------------------------------------------------

// ConfigWalking

// string json_kinematic = 1;
inline void ConfigWalking::clear_json_kinematic() {
  _impl_.json_kinematic_.ClearToEmpty();
}
inline const std::string& ConfigWalking::json_kinematic() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.ConfigWalking.json_kinematic)
  return _internal_json_kinematic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWalking::set_json_kinematic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.json_kinematic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.ConfigWalking.json_kinematic)
}
inline std::string* ConfigWalking::mutable_json_kinematic() {
  std::string* _s = _internal_mutable_json_kinematic();
  // @@protoc_insertion_point(field_mutable:ros2_ws.aruku.proto.ConfigWalking.json_kinematic)
  return _s;
}
inline const std::string& ConfigWalking::_internal_json_kinematic() const {
  return _impl_.json_kinematic_.Get();
}
inline void ConfigWalking::_internal_set_json_kinematic(const std::string& value) {
  
  _impl_.json_kinematic_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigWalking::_internal_mutable_json_kinematic() {
  
  return _impl_.json_kinematic_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigWalking::release_json_kinematic() {
  // @@protoc_insertion_point(field_release:ros2_ws.aruku.proto.ConfigWalking.json_kinematic)
  return _impl_.json_kinematic_.Release();
}
inline void ConfigWalking::set_allocated_json_kinematic(std::string* json_kinematic) {
  if (json_kinematic != nullptr) {
    
  } else {
    
  }
  _impl_.json_kinematic_.SetAllocated(json_kinematic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_kinematic_.IsDefault()) {
    _impl_.json_kinematic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros2_ws.aruku.proto.ConfigWalking.json_kinematic)
}

// string json_walking = 2;
inline void ConfigWalking::clear_json_walking() {
  _impl_.json_walking_.ClearToEmpty();
}
inline const std::string& ConfigWalking::json_walking() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.ConfigWalking.json_walking)
  return _internal_json_walking();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWalking::set_json_walking(ArgT0&& arg0, ArgT... args) {
 
 _impl_.json_walking_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.ConfigWalking.json_walking)
}
inline std::string* ConfigWalking::mutable_json_walking() {
  std::string* _s = _internal_mutable_json_walking();
  // @@protoc_insertion_point(field_mutable:ros2_ws.aruku.proto.ConfigWalking.json_walking)
  return _s;
}
inline const std::string& ConfigWalking::_internal_json_walking() const {
  return _impl_.json_walking_.Get();
}
inline void ConfigWalking::_internal_set_json_walking(const std::string& value) {
  
  _impl_.json_walking_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigWalking::_internal_mutable_json_walking() {
  
  return _impl_.json_walking_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigWalking::release_json_walking() {
  // @@protoc_insertion_point(field_release:ros2_ws.aruku.proto.ConfigWalking.json_walking)
  return _impl_.json_walking_.Release();
}
inline void ConfigWalking::set_allocated_json_walking(std::string* json_walking) {
  if (json_walking != nullptr) {
    
  } else {
    
  }
  _impl_.json_walking_.SetAllocated(json_walking, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_walking_.IsDefault()) {
    _impl_.json_walking_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros2_ws.aruku.proto.ConfigWalking.json_walking)
}

// -------------------------------------------------------------------

// SetWalking

// bool run = 1;
inline void SetWalking::clear_run() {
  _impl_.run_ = false;
}
inline bool SetWalking::_internal_run() const {
  return _impl_.run_;
}
inline bool SetWalking::run() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.SetWalking.run)
  return _internal_run();
}
inline void SetWalking::_internal_set_run(bool value) {
  
  _impl_.run_ = value;
}
inline void SetWalking::set_run(bool value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.SetWalking.run)
}

// double x_move = 2;
inline void SetWalking::clear_x_move() {
  _impl_.x_move_ = 0;
}
inline double SetWalking::_internal_x_move() const {
  return _impl_.x_move_;
}
inline double SetWalking::x_move() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.SetWalking.x_move)
  return _internal_x_move();
}
inline void SetWalking::_internal_set_x_move(double value) {
  
  _impl_.x_move_ = value;
}
inline void SetWalking::set_x_move(double value) {
  _internal_set_x_move(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.SetWalking.x_move)
}

// double y_move = 3;
inline void SetWalking::clear_y_move() {
  _impl_.y_move_ = 0;
}
inline double SetWalking::_internal_y_move() const {
  return _impl_.y_move_;
}
inline double SetWalking::y_move() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.SetWalking.y_move)
  return _internal_y_move();
}
inline void SetWalking::_internal_set_y_move(double value) {
  
  _impl_.y_move_ = value;
}
inline void SetWalking::set_y_move(double value) {
  _internal_set_y_move(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.SetWalking.y_move)
}

// double a_move = 4;
inline void SetWalking::clear_a_move() {
  _impl_.a_move_ = 0;
}
inline double SetWalking::_internal_a_move() const {
  return _impl_.a_move_;
}
inline double SetWalking::a_move() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.SetWalking.a_move)
  return _internal_a_move();
}
inline void SetWalking::_internal_set_a_move(double value) {
  
  _impl_.a_move_ = value;
}
inline void SetWalking::set_a_move(double value) {
  _internal_set_a_move(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.SetWalking.a_move)
}

// bool aim_on = 5;
inline void SetWalking::clear_aim_on() {
  _impl_.aim_on_ = false;
}
inline bool SetWalking::_internal_aim_on() const {
  return _impl_.aim_on_;
}
inline bool SetWalking::aim_on() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.SetWalking.aim_on)
  return _internal_aim_on();
}
inline void SetWalking::_internal_set_aim_on(bool value) {
  
  _impl_.aim_on_ = value;
}
inline void SetWalking::set_aim_on(bool value) {
  _internal_set_aim_on(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.SetWalking.aim_on)
}

// -------------------------------------------------------------------

// Status

// bool is_running = 1;
inline void Status::clear_is_running() {
  _impl_.is_running_ = false;
}
inline bool Status::_internal_is_running() const {
  return _impl_.is_running_;
}
inline bool Status::is_running() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Status.is_running)
  return _internal_is_running();
}
inline void Status::_internal_set_is_running(bool value) {
  
  _impl_.is_running_ = value;
}
inline void Status::set_is_running(bool value) {
  _internal_set_is_running(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Status.is_running)
}

// double x_amplitude = 2;
inline void Status::clear_x_amplitude() {
  _impl_.x_amplitude_ = 0;
}
inline double Status::_internal_x_amplitude() const {
  return _impl_.x_amplitude_;
}
inline double Status::x_amplitude() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Status.x_amplitude)
  return _internal_x_amplitude();
}
inline void Status::_internal_set_x_amplitude(double value) {
  
  _impl_.x_amplitude_ = value;
}
inline void Status::set_x_amplitude(double value) {
  _internal_set_x_amplitude(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Status.x_amplitude)
}

// double y_amplitude = 3;
inline void Status::clear_y_amplitude() {
  _impl_.y_amplitude_ = 0;
}
inline double Status::_internal_y_amplitude() const {
  return _impl_.y_amplitude_;
}
inline double Status::y_amplitude() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Status.y_amplitude)
  return _internal_y_amplitude();
}
inline void Status::_internal_set_y_amplitude(double value) {
  
  _impl_.y_amplitude_ = value;
}
inline void Status::set_y_amplitude(double value) {
  _internal_set_y_amplitude(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Status.y_amplitude)
}

// double a_amplitude = 4;
inline void Status::clear_a_amplitude() {
  _impl_.a_amplitude_ = 0;
}
inline double Status::_internal_a_amplitude() const {
  return _impl_.a_amplitude_;
}
inline double Status::a_amplitude() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Status.a_amplitude)
  return _internal_a_amplitude();
}
inline void Status::_internal_set_a_amplitude(double value) {
  
  _impl_.a_amplitude_ = value;
}
inline void Status::set_a_amplitude(double value) {
  _internal_set_a_amplitude(value);
  // @@protoc_insertion_point(field_set:ros2_ws.aruku.proto.Status.a_amplitude)
}

// .ros2_ws.aruku.proto.Point2 odometry = 5;
inline bool Status::_internal_has_odometry() const {
  return this != internal_default_instance() && _impl_.odometry_ != nullptr;
}
inline bool Status::has_odometry() const {
  return _internal_has_odometry();
}
inline void Status::clear_odometry() {
  if (GetArenaForAllocation() == nullptr && _impl_.odometry_ != nullptr) {
    delete _impl_.odometry_;
  }
  _impl_.odometry_ = nullptr;
}
inline const ::ros2_ws::aruku::proto::Point2& Status::_internal_odometry() const {
  const ::ros2_ws::aruku::proto::Point2* p = _impl_.odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros2_ws::aruku::proto::Point2&>(
      ::ros2_ws::aruku::proto::_Point2_default_instance_);
}
inline const ::ros2_ws::aruku::proto::Point2& Status::odometry() const {
  // @@protoc_insertion_point(field_get:ros2_ws.aruku.proto.Status.odometry)
  return _internal_odometry();
}
inline void Status::unsafe_arena_set_allocated_odometry(
    ::ros2_ws::aruku::proto::Point2* odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odometry_);
  }
  _impl_.odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros2_ws.aruku.proto.Status.odometry)
}
inline ::ros2_ws::aruku::proto::Point2* Status::release_odometry() {
  
  ::ros2_ws::aruku::proto::Point2* temp = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros2_ws::aruku::proto::Point2* Status::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:ros2_ws.aruku.proto.Status.odometry)
  
  ::ros2_ws::aruku::proto::Point2* temp = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
  return temp;
}
inline ::ros2_ws::aruku::proto::Point2* Status::_internal_mutable_odometry() {
  
  if (_impl_.odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros2_ws::aruku::proto::Point2>(GetArenaForAllocation());
    _impl_.odometry_ = p;
  }
  return _impl_.odometry_;
}
inline ::ros2_ws::aruku::proto::Point2* Status::mutable_odometry() {
  ::ros2_ws::aruku::proto::Point2* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:ros2_ws.aruku.proto.Status.odometry)
  return _msg;
}
inline void Status::set_allocated_odometry(::ros2_ws::aruku::proto::Point2* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odometry);
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:ros2_ws.aruku.proto.Status.odometry)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aruku
}  // namespace ros2_ws

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aruku_2eproto
